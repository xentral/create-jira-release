name: "Jira Release Web Hook"
description: "Creates a new Jira release and assigns all relevant issues to it."
inputs:
  jira-project-key:
    description: "Jira project identifier"
    required: true
  previous-version:
    description: "Previous release version"
    required: true
  release-version:
    description: "Release version"
    required: true
runs:
  using: "composite"
  steps:
    - name: Collect issue numbers since last release/tag
      run: |
        export LANG=en_US.utf-8
        export LC_ALL=en_US.utf8
        git log ${{inputs.previous-version}}...${{inputs.release-version}} | \
          grep -oPi "${{ inputs.jira-project-key }}-\d{1,}" | sort | uniq | \
          sed 's/^\|$/"/g' | paste -sd , | awk '{print "RELATED_JIRA_ISSUES="$0}' >> $GITHUB_ENV
      shell: bash --noprofile --norc {0}

    - name: Create json and invoke webhook
      run: |
        $json = ConvertTo-Json @{
          issues = @(${{ env.RELATED_JIRA_ISSUES }})
          data = @{
            version = "${{ inputs.release-version }}"
            projectName = "${{ inputs.jira-project-key }}"
          }
        }
        $headers = @{
          "X-Automation-Webhook-Token" = "${{ env.JIRA_API_TOKEN }}"
          "Content-Type" = "application/json"
        }
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-RestMethod -Uri "${{ env.JIRA_API_URL }}" `
                          -Method Post `
                          -Headers $headers `
                          -Body $json
      shell: pwsh
